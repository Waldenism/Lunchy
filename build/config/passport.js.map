{"version":3,"sources":["../../lunchyapp/config/passport.js"],"names":["LocalStrategy","require","Strategy","User","Group","bCrypt","Users","module","exports","passport","use","usernameField","passwordField","groupField","passReqToCallback","req","username","password","done","body","group","admin","first","last","findOne","err","user","console","log","newUser","createHash","name","save","res","then","grp","addGroupId","_id","newGroup","groupname","groupbalance","paid","adminid","hashSync","genSaltSync","serializeUser","deserializeUser","id","findById","isValidPassword","compareSync"],"mappings":"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","file":"passport.js","sourcesContent":["var LocalStrategy   = require('passport-local').Strategy;\nvar User = require('../models/users');\nvar Group = require('../models/group');\nvar bCrypt = require('bcrypt-nodejs');\nvar Users = require('./users');\n\nmodule.exports = function(passport){\n\n    //PASSPORT SIGNUP\n    passport.use('signup', new LocalStrategy({\n            usernameField: 'username',\n            passwordField: 'password',\n            groupField: 'group',\n            passReqToCallback : true // allows us to pass back the entire request to the callback\n        },\n\n        function(req, username, password, done) {\n\n\n            const { group, admin, first, last } = req.body;\n\n            // find a user in Mongo with provided username\n            User.findOne({ 'username' :  username }, function(err, user) {\n                // In case of any error, return using the done method\n                if (err){\n                    console.log('Error in SignUp: '+err);\n                    return done(err);\n                }\n\n                // already exists\n                if (user) {\n                    console.log('User already exists with username: '+ username);\n                    return done(null, false);\n\n                } else {\n                    // if there is no user with that email, create the user\n                    var newUser = new User();\n\n                    // set the user's local credentials\n                    newUser.username = username;\n                    newUser.password = createHash(password);\n                    newUser.name.first = first;\n                    newUser.name.last = last;\n                    newUser.group.name = group;\n                    newUser.group.admin = admin;\n\n                    // save the user\n                    newUser.save(function(err, res) {\n                        if (err){\n                            console.log('Error in Saving user: '+err);\n                            throw err;\n                        }\n\n                        console.log('User Registration succesful');\n                    }).then(() => {\n\n                        Group.findOne({ 'groupname': group }, function(err, grp) {\n                            if (err) {\n                                console.log('Error in Find Group: '+err);\n                                return done(err);\n                            }\n\n                            if (grp) {\n                                Users.addGroupId(newUser._id, grp._id)\n                                console.log('User Added to Group: ' +group);\n                                return done(null, newUser);\n\n                            } else {\n                                var newGroup = new Group();\n\n                                newGroup.groupname = group;\n                                newGroup.groupbalance = 0;\n                                newGroup.paid = true;\n                                newGroup.adminid = newUser._id;\n\n                                newGroup.save(function(err, res) {\n                                    if (err) {\n                                        console.log('Error in Saving group: ' +err);\n                                        throw err;\n                                    }\n\n                                    console.log('Group Registration Successful');\n                                    console.log('---------------------------------');\n                                    console.log(newGroup);\n                                }).then(() => {\n\n                                    Users.addGroupId(newUser._id, newGroup._id)\n                                    return done(null, newUser);\n                                })\n                            }\n                        })\n                    });\n                }\n            });\n        })\n    );\n\n    // Generates hash using bCrypt\n    function createHash(password) {\n        return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);\n    };\n\n    passport.serializeUser(function(user, done) {\n        done(null, user._id);\n    });\n\n    passport.deserializeUser(function(id, done) {\n        User.findById(id, function(err, user) {\n            done(err, user);\n        });\n    });\n\n\n    //PASSPORT LOGIN\n    passport.use('login', new LocalStrategy({\n            passReqToCallback : true\n        },\n\n        function(req, username, password, done) {\n            // check in mongo if a user with username exists or not\n            User.findOne({ 'username' :  username },\n                function(err, user) {\n                    // In case of any error, return using the done method\n                    if (err)\n                        return done(err);\n\n                    // Username does not exist, log the error and redirect back\n                    if (!user){\n                        console.log('*********************************');\n                        console.log('User Not Found with username '+username);\n                        console.log('*********************************');\n\n                        return done(null, false);\n                    }\n\n                    // User exists but wrong password, log the error\n                    if (!isValidPassword(user, password)){\n                        console.log('*********************************');\n                        console.log('Invalid Password');\n                        console.log('*********************************');\n\n                        return done(null, false); // redirect back to login page\n                    }\n\n                    // User and password both match, return user from done method\n                    // which will be treated like success\n                    return done(null, user);\n                }\n            );\n\n        })\n    );\n\n\n    function isValidPassword(user, password) {\n        return bCrypt.compareSync(password, user.password);\n    };\n}\n"]}