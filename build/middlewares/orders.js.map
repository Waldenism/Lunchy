{"version":3,"sources":["../../lunchyapp/middlewares/orders.js"],"names":["Orders","require","Users","Order","newOrder","user","callback","userid","groupid","theOrder","restaurant","console","log","addItem","group","item","name","balance","paid","save","err","deleteOrder","data","_id","value","remove","id","handleError","getOrders","find","res","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,kBAAR,CAAb;AACA,IAAIC,QAAQD,QAAQ,iBAAR,CAAZ;;AAEA,IAAME,QAAQ;AACVC,cAAU,kBAACC,IAAD,EAAOC,QAAP,EAAoB;AAAA,YACpBC,MADoB,GACsBF,IADtB,CACpBE,MADoB;AAAA,YACZC,OADY,GACsBH,IADtB,CACZG,OADY;AAAA,YACHC,QADG,GACsBJ,IADtB,CACHI,QADG;AAAA,YACOC,UADP,GACsBL,IADtB,CACOK,UADP;;;AAG1B,YAAI,CAACH,MAAL,EAAa;AACTI,oBAAQC,GAAR,CAAY,eAAZ;AAEH,SAHD,MAGO;;AAEH,gBAAIC,UAAU,IAAIb,MAAJ,EAAd;AACAa,oBAAQN,MAAR,GAAiBA,MAAjB;AACAM,oBAAQC,KAAR,GAAgBN,OAAhB;AACAK,oBAAQE,IAAR,GAAeN,SAASO,IAAxB;AACAH,oBAAQH,UAAR,GAAqBA,UAArB;AACAG,oBAAQI,OAAR,GAAkB,EAAlB;AACAJ,oBAAQK,IAAR,GAAe,KAAf;;AAEA;AACAL,oBAAQM,IAAR,CAAa,UAASC,GAAT,EAAc;AACvB,oBAAIA,GAAJ,EAAQ;AACJT,4BAAQC,GAAR,CAAY,2BAAyBQ,GAArC;AACA,0BAAMA,GAAN;AACH;AACDT,wBAAQC,GAAR,CAAY,mCAAZ;AACAD,wBAAQC,GAAR,CAAYC,OAAZ;;AAEAP,yBAASO,OAAT;AACH,aATD;AAUH;AACJ,KA7BS;;AA+BVQ,iBAAa,qBAAChB,IAAD,EAAOiB,IAAP,EAAahB,QAAb,EAA0B;;AAEnC,YAAI,CAACD,IAAL,EAAW;AACPM,oBAAQC,GAAR,CAAY,eAAZ;AAEH,SAHD,MAGO;AAAA,gBACGW,GADH,GACkBlB,IADlB,CACGkB,GADH;AAAA,gBACQT,KADR,GACkBT,IADlB,CACQS,KADR;AAAA,gBAEGU,KAFH,GAEyBF,IAFzB,CAEGE,KAFH;AAAA,gBAEUd,UAFV,GAEyBY,IAFzB,CAEUZ,UAFV;;;AAIHV,mBAAOyB,MAAP,CAAc,EAAElB,QAAQgB,GAAV,EAAeT,OAAOA,MAAMY,EAA5B,EAAgCX,MAAMS,KAAtC,EAAd,EAA4D,UAASJ,GAAT,EAAc;AACtE,oBAAIA,GAAJ,EAAS,OAAOO,YAAYP,GAAZ,CAAP;AACTd;AACH,aAHD;AAIH;AACJ,KA7CS;;AA+CVsB,eAAW,mBAACF,EAAD,EAAKpB,QAAL,EAAkB;AACzBN,eAAO6B,IAAP,CAAY,EAAE,SAASH,EAAX,EAAe,QAAQ,KAAvB,EAAZ,EAA4C,UAASN,GAAT,EAAcU,GAAd,EAAmB;AAC3D,gBAAIV,GAAJ,EAAS;AAAET,wBAAQC,GAAR,CAAYQ,GAAZ;AAAkB;AAC7Bd,qBAASwB,GAAT;AACH,SAHD;AAIH;AApDS,CAAd;;AAwDAC,OAAOC,OAAP,GAAiB7B,KAAjB","file":"orders.js","sourcesContent":["var Orders = require('../models/orders');\nvar Users = require('../models/users');\n\nconst Order = {\n    newOrder: (user, callback) => {\n        let { userid, groupid, theOrder, restaurant } = user;\n\n        if (!userid) {\n            console.log('not logged in');\n\n        } else {\n\n            let addItem = new Orders()\n            addItem.userid = userid;\n            addItem.group = groupid;\n            addItem.item = theOrder.name;\n            addItem.restaurant = restaurant;\n            addItem.balance = 10;\n            addItem.paid = false;\n\n            //save the user\n            addItem.save(function(err) {\n                if (err){\n                    console.log('Error in Saving item: '+err);\n                    throw err;\n                }\n                console.log(\"**** Item added to Database *****\");\n                console.log(addItem);\n\n                callback(addItem);\n            });\n        }\n    },\n\n    deleteOrder: (user, data, callback) => {\n\n        if (!user) {\n            console.log('not logged in');\n\n        } else {\n            let { _id, group } = user;\n            let { value, restaurant } = data;\n\n            Orders.remove({ userid: _id, group: group.id, item: value}, function(err) {\n                if (err) return handleError(err);\n                callback();\n            });\n        };\n    },\n\n    getOrders: (id, callback) => {\n        Orders.find({ 'group': id, 'paid': false }, function(err, res) {\n            if (err) { console.log(err) };\n            callback(res)\n        })\n    }\n}\n\n\nmodule.exports = Order;\n"]}