{"version":3,"sources":["../../lunchyapp/server/server.js"],"names":["bodyParser","require","cookieParser","DEFAULT_PORT","app","compiler","set","process","env","PORT","Promise","global","MONGODB_URI","connect","useMongoClient","passport","session","use","secret","resave","saveUninitialized","initialize","urlencoded","extended","json","routes","NODE_ENV","console","log","webpackMiddleware","webpackHotMiddleware","middleware","publicPath","output","contentBase","stats","colors","hash","timings","chunks","chunkModules","modules","static","join","__dirname","get","request","response","sendFile","listen","error"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAYA;;;;;;AAVA,IAAMA,aAAaC,QAAQ,aAAR,CAAnB;AACA,IAAMC,eAAeD,QAAQ,eAAR,CAArB;;AAEA,IAAME,eAAe,IAArB;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,WAAW,yCAAjB;AACAD,IAAIE,GAAJ,CAAQ,MAAR,EAAgBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBN,YAApC;;AAGA;;AAEA,mBAASO,OAAT,GAAmBC,OAAOD,OAA1B;;AAGA;AACA;AACA;;AAEA,IAAIH,QAAQC,GAAR,CAAYI,WAAhB,EAA6B;AAC3B,qBAASC,OAAT,CAAiBN,QAAQC,GAAR,CAAYI,WAA7B,EAA0C;AACxCE,oBAAgB;AADwB,GAA1C;AAGD,CAJD,MAIO;AACL,qBAASD,OAAT,CAAiB,4BAAjB;AACD;;AAID;AACA,IAAIE,WAAWd,QAAQ,UAAR,CAAf;AACA,IAAIe,UAAUf,QAAQ,iBAAR,CAAd;;AAEAA,QAAQ,uBAAR,EAAiCc,QAAjC;AACAX,IAAIa,GAAJ,CAAQD,QAAQ;AACdE,UAAQ,aADM;AAEdC,UAAQ,KAFM;AAGdC,qBAAmB;AAHL,CAAR,CAAR;AAKAhB,IAAIa,GAAJ,CAAQF,SAASM,UAAT,EAAR;AACAjB,IAAIa,GAAJ,CAAQF,SAASC,OAAT,EAAR;;AAGAZ,IAAIa,GAAJ,CAAQf,cAAR,E,CAAyB;AACzB;AACAE,IAAIa,GAAJ,CAAQjB,WAAWsB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAnB,IAAIa,GAAJ,CAAQjB,WAAWwB,IAAX,EAAR;;AAGA;AACA,IAAMC,SAASxB,QAAQ,qBAAR,CAAf;AACAG,IAAIa,GAAJ,CAAQ,GAAR,EAAaQ,MAAb;;AAGA,IAAGlB,QAAQC,GAAR,CAAYkB,QAAZ,KAAyB,aAA5B,EAA2C;AACzCC,UAAQC,GAAR,CAAY,gCAAZ;;AAEA,MAAMC,oBAAoB5B,QAAQ,wBAAR,CAA1B;AACA,MAAM6B,uBAAuB7B,QAAQ,wBAAR,CAA7B;AACA,MAAM8B,aAAaF,kBAAkBxB,QAAlB,EAA4B;AAC7C2B,gBAAY,kBAAOC,MAAP,CAAcD,UADmB;AAE7CE,iBAAa,QAFgC;AAG7CC,WAAO;AACLC,cAAQ,IADH;AAELC,YAAM,KAFD;AAGLC,eAAS,IAHJ;AAILC,cAAQ,KAJH;AAKLC,oBAAc,KALT;AAMLC,eAAS;AANJ;AAHsC,GAA5B,CAAnB;;AAaArC,MAAIa,GAAJ,CAAQc,UAAR;AACA3B,MAAIa,GAAJ,CAAQa,qBAAqBzB,QAArB,CAAR;AACD;;AAGDD,IAAIa,GAAJ,CAAQ,kBAAQyB,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,qBAArB,CAAf,CAAR;AACAxC,IAAIyC,GAAJ,CAAQ,GAAR,EAAa,UAASC,OAAT,EAAkBC,QAAlB,EAA2B;AACtCA,WAASC,QAAT,CAAkB,eAAKL,IAAL,CAAUC,YAAY,wBAAtB,EAAgD,YAAhD,CAAlB;AACD,CAFD;;AAMAxC,IAAI6C,MAAJ,CAAW7C,IAAIyC,GAAJ,CAAQ,MAAR,CAAX,EAA4B,UAAUK,KAAV,EAAiB;AACzC,MAAGA,KAAH,EAAU;AACNvB,YAAQC,GAAR,CAAYsB,KAAZ;AACH,GAFD,MAEO;AACHvB,YAAQC,GAAR,CAAY,wBAAZ;AACH;AACJ,CAND","file":"server.js","sourcesContent":["import express from 'express';\nimport path from 'path';\nimport webpack from 'webpack';\nimport config from './webpack.config';\n\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\n\nconst DEFAULT_PORT = 3000;\nconst app = express();\nconst compiler = webpack(config);\napp.set(\"port\", process.env.PORT || DEFAULT_PORT);\n\n\n//mongoose config\nimport mongoose from 'mongoose';\nmongoose.Promise = global.Promise;\n\n\n// mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/lunchy', {\n//   useMongoClient: true\n// });\n\nif (process.env.MONGODB_URI) {\n  mongoose.connect(process.env.MONGODB_URI, {\n    useMongoClient: true\n  })\n} else {\n  mongoose.connect('mongodb://localhost/lunchy');\n}\n\n\n\n//passport config\nvar passport = require('passport');\nvar session = require('express-session');\n\nrequire('../config/passport.js')(passport);\napp.use(session({\n  secret: 'mySecretKey',\n  resave: false,\n  saveUninitialized: false\n} ));\napp.use(passport.initialize());\napp.use(passport.session());\n\n\napp.use(cookieParser()); // read cookies (needed for auth)\n// required for passport\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n\n//route\nconst routes = require('../routes/routes.js');\napp.use('/', routes);\n\n\nif(process.env.NODE_ENV === 'development') {\n  console.log('Running in DEVELOPMENT mode...');\n\n  const webpackMiddleware = require('webpack-dev-middleware');\n  const webpackHotMiddleware = require('webpack-hot-middleware');\n  const middleware = webpackMiddleware(compiler, {\n    publicPath: config.output.publicPath,\n    contentBase: 'public',\n    stats: {\n      colors: true,\n      hash: false,\n      timings: true,\n      chunks: false,\n      chunkModules: false,\n      modules: false,\n    }\n  })\n\n  app.use(middleware)\n  app.use(webpackHotMiddleware(compiler))\n}\n\n\napp.use(express.static(path.join(__dirname, \"../../client/public\")))\napp.get('*', function(request, response){\n  response.sendFile(path.join(__dirname + '../../../client/public', 'index.html'))\n})\n\n\n\napp.listen(app.get(\"port\"), function (error) {\n    if(error) {\n        console.log(error);\n    } else {\n        console.log('Listening on port 3000');\n    }\n})\n"]}